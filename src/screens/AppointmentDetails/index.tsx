import React, { Fragment, useCallback, useEffect, useState } from 'react';
import {
  Text,
  View,
  ImageBackground,
  FlatList,
  Alert,
  Platform,
  Share,
  RefreshControl,
} from 'react-native';
import { Fontisto } from '@expo/vector-icons';
import { BorderlessButton } from 'react-native-gesture-handler';
import * as Linking from 'expo-linking';

import i18n from '../../i18n';
import { BannerImg } from '../../assets';
import { AppointmentDataProps } from '../../components/Appointment';
import { MemberDataProps } from '../../components/Member';
import {
  Background,
  ButtonIcon,
  Header,
  ListDivider,
  ListHeader,
  Loading,
  Member,
  NoData,
} from '../../components';

import { theme } from '../../global/styles/theme';
import { styles } from './styles';
import { useRoute } from '@react-navigation/native';
import { api } from '../../services/api';

type GuildWidget = {
  id: string;
  name: string;
  instant_invite: string;
  members: MemberDataProps[];
};

type Params = {
  selectedAppointment: AppointmentDataProps;
};

export const AppointmentDetails = () => {
  const route = useRoute();
  const { selectedAppointment } = route.params as Params;
  const [guildWidget, setGuildWidget] = useState<GuildWidget>(
    {} as GuildWidget
  );
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isRefreshing, setIsRefreshing] = useState<boolean>(false);

  const fetchGuildsWidget = useCallback(async () => {
    try {
      const response = await api.get(
        //card generated by discord; for some servers, only bots can get this info, so we implemented this
        // functionality manually by creating our own server
        `/guilds/${selectedAppointment.guild.id}/widget.json`
      );
      setGuildWidget(response.data);
    } catch (error) {
      Alert.alert(
        i18n.t('global.anErrorOccurred'),
        i18n.t('appointmentDetails.error')
      );
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handleShareInvitation = () => {
    const message =
      Platform.OS === 'ios'
        ? i18n.t('appointmentDetails.join', {
            guildName: selectedAppointment.guild.name,
          })
        : guildWidget.instant_invite;

    Share.share({
      message,
      url: guildWidget.instant_invite,
    });
  };

  const handleOpenGuild = () => Linking.openURL(guildWidget.instant_invite);

  const handleRefresh = useCallback(async () => {
    setIsRefreshing(true);
    await fetchGuildsWidget();
    setTimeout(() => {
      setIsRefreshing(false);
    }, 1000);
  }, []);

  useEffect(() => {
    fetchGuildsWidget();
  }, []);

  const renderContent = () => {
    if (isLoading) {
      return <Loading />;
    }

    if (!guildWidget?.members?.length) {
      return <NoData message={i18n.t('appointmentDetails.noMembers')} />;
    }

    return (
      <Fragment>
        <ListHeader
          title={i18n.t('appointmentDetails.listTitle')}
          subtitle={i18n.t('appointmentDetails.listSubtitle', {
            nrOfPlayers: guildWidget?.members.length,
          })}
        />

        <FlatList
          style={styles.members}
          data={guildWidget.members}
          keyExtractor={item => item.id}
          renderItem={({ item }) => <Member data={item} />}
          ItemSeparatorComponent={() => <ListDivider isCentered />}
          refreshControl={
            <RefreshControl
              refreshing={isRefreshing}
              onRefresh={() => handleRefresh()}
            />
          }
        />
        {selectedAppointment.guild.owner && (
          <View style={styles.footer}>
            <ButtonIcon
              title={i18n.t('appointmentDetails.play')}
              onPress={handleOpenGuild}
            />
          </View>
        )}
      </Fragment>
    );
  };

  return (
    <Background>
      <Header
        title={i18n.t('appointmentDetails.title')}
        action={
          selectedAppointment.guild.owner && (
            <BorderlessButton onPress={handleShareInvitation}>
              <Fontisto name='share' size={20} color={theme.colors.primary} />
            </BorderlessButton>
          )
        }
      />
      <ImageBackground source={BannerImg} style={styles.banner}>
        <View style={styles.bannerContent}>
          <Text style={styles.title}>{selectedAppointment.guild.name}</Text>
          <Text style={styles.subtitle}>{selectedAppointment.description}</Text>
        </View>
      </ImageBackground>
      {renderContent()}
    </Background>
  );
};
